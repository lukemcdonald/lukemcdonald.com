---
const base = new URL(Astro.request.url)
const fetchJson = (path: string) => fetch(new URL(path, base)).then((r) => r.json())

type WorkItem = {
  company: string
  position: string
  startDate: string
  endDate?: string | null
  highlights?: string[]
}
type AwardItem = { title: string; org?: string; date?: string }
type EducationItem = { institution: string; studyType?: string; area?: string }

const resume: Record<string, unknown> = await fetchJson('/api/resume.json')
const basics = (resume.basics as Record<string, any>) || {}
const skills = (resume.skills as string[]) || []
const work = (resume.work as WorkItem[]) || []
const awards = (resume.awards as AwardItem[]) || []
const education = (resume.education as EducationItem[]) || []
const personal = (resume.personal as string[]) || []
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1"
    />
    <title>{basics.name ? `${basics.name} — Resume` : 'Resume'}</title>
  </head>
  <body
    style="font-family: ui-sans-serif, system-ui; line-height: 1.6; padding: 2rem; max-width: 72rem; margin: 0 auto;"
  >
    <header>
      <h1 style="margin: 0 0 .25rem 0;">{basics.name}</h1>
      {basics.label && <p style="margin: 0 0 1rem 0;">{basics.label}</p>}
      <p style="margin: 0 0 1rem 0;">
        {basics.website && <a href={basics.website}>{basics.website}</a>}{
          basics.website && basics.email && ' · '
        }
        {basics.email && <a href={`mailto:${basics.email}`}>{basics.email}</a>}
      </p>
      {basics.intro && <p>{basics.intro}</p>}
    </header>

    {
      skills.length > 0 && (
        <section>
          <h2>Skills</h2>
          <p>{skills.join(', ')}</p>
        </section>
      )
    }

    {
      work.length > 0 && (
        <section>
          <h2>Experience</h2>
          <ul>
            {work.map((w: WorkItem) => (
              <li style="margin-bottom: 1rem;">
                <strong>{w.position}</strong> @ {w.company} ({w.startDate}–{w.endDate || 'Present'})
                {w.highlights && (
                  <ul>
                    {w.highlights.map((h: string) => (
                      <li>{h}</li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </section>
      )
    }

    {
      awards.length > 0 && (
        <section>
          <h2>Awards & Accomplishments</h2>
          <ul>
            {awards.map((a: AwardItem) => (
              <li>
                {a.title}
                {a.org ? ` — ${a.org}` : ''}
                {a.date ? ` (${a.date})` : ''}
              </li>
            ))}
          </ul>
        </section>
      )
    }

    {
      education.length > 0 && (
        <section>
          <h2>Education</h2>
          <ul>
            {education.map((e: EducationItem) => (
              <li>
                {e.studyType} {e.area ? `${e.area} ` : ''}— {e.institution}
              </li>
            ))}
          </ul>
        </section>
      )
    }

    {
      personal.length > 0 && (
        <section>
          <h2>Personal</h2>
          <ul>
            {personal.map((p: string) => (
              <li>{p}</li>
            ))}
          </ul>
        </section>
      )
    }

    <footer style="margin-top: 2rem; font-size: .9rem;">
      <p>
        Endpoints:
        <a href="/api/resume.json">/api/resume.json</a>,
        <a href="/api/resume/basics.json">/api/resume/basics.json</a>,
        <a href="/api/resume/skills.json">/api/resume/skills.json</a>,
        <a href="/api/resume/personal.json">/api/resume/personal.json</a>,
        <a href="/api/resume/work.json">/api/resume/work.json</a>,
        <a href="/api/resume/awards.json">/api/resume/awards.json</a>,
        <a href="/api/resume/education.json">/api/resume/education.json</a>
      </p>
    </footer>
  </body>
</html>
